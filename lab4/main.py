from functions import *
from utils import *
import matplotlib.pyplot as plt

import numpy as np
import pandas as pd


def solve_polynom(points: list, power: int):
    xs = [0] * (power * 2 + 1)
    for m in range(power * 2 + 1):
        for x, y in points:
            xs[m] += x ** m

    coef_matrix = []
    for i in range(power + 1):
        coef_matrix.append(xs[i: i + power + 1])

    free_matrix = [0] * (power + 1)
    for m in range(power + 1):
        for x, y in points:
            free_matrix[m] += x ** m * y

    return list(np.linalg.solve(coef_matrix, free_matrix))


def solve_log(points: list):
    new_points = []
    try:
        for x, y in points:
            new_points.append((math.log(x), y))
    except ValueError:
        print("–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
        return None
    return solve_polynom(new_points, 1)


def solve_pow(points: list):
    new_points = []
    try:
        for x, y in points:
            new_points.append((math.log(x), math.log(y)))
    except ValueError:
        print("–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è —Å—Ç–µ–ø–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
        return None
    params = solve_polynom(new_points, 1)
    params[0] = math.exp(params[0])
    return params


def solve_exp(points: list):
    new_points = []
    try:
        for x, y in points:
            new_points.append((x, math.log(y)))
    except ValueError:
        print("–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
        return None
    params = solve_polynom(new_points, 1)
    params[0] = math.exp(params[0])
    return params


def create_frame_line(function: Callable, params: list, points: list):
    if params is None:
        return [None, None, None, None, None, None]
    return params + [None] * (4 - len(params)) + [S(function, params, points),
                                                  standard_deviation(function, params, points)]


def print_func_quality(function: Callable, params: list, points: list, name: str = ""):
    if params is None:
        return
    calculated_ys = [function(x, params) for x, y in points]
    data = [[x for x, y in points],
            [y for x, y in points],
            calculated_ys,
            [calculated_y - y for y, calculated_y in zip([y for x, y in points], calculated_ys)]]
    print(name)
    print(pd.DataFrame(data, index=["X", "Y", "œÜ(x)", "ùõÜ"]).to_string())
    print()


points = read_points('points2')

linear_params = solve_polynom(points, 1)
double_params = solve_polynom(points, 2)
triple_params = solve_polynom(points, 3)
log_params = solve_log(points)
pow_params = solve_pow(points)
exp_params = solve_exp(points)

print_func_quality(polynom, linear_params, points, "–õ–∏–Ω–µ–π–Ω–∞—è")
pc = pearson_coef(points)
print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞: {pc}")
print_func_quality(polynom, double_params, points, "–ü–æ–ª–∏–Ω–æ–º 2 —Å—Ç–µ–ø–µ–Ω–∏")
print_func_quality(polynom, triple_params, points, "–ü–æ–ª–∏–Ω–æ–º 3 —Å—Ç–µ–ø–µ–Ω–∏")
print_func_quality(log_func, log_params, points, "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è")
print_func_quality(pow_func, pow_params, points, "–°—Ç–µ–ø–µ–Ω–Ω–∞—è")
print_func_quality(exp_func, exp_params, points, "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è")

print_data = [create_frame_line(polynom, linear_params, points),
              create_frame_line(polynom, double_params, points),
              create_frame_line(polynom, triple_params, points),
              create_frame_line(log_func, log_params, points),
              create_frame_line(pow_func, pow_params, points),
              create_frame_line(exp_func, exp_params, points)
              ]

frame = pd.DataFrame(print_data, columns=["a0", "a1", "a2", "a3", "S", "œÉ"], index=["–õ–∏–Ω–µ–π–Ω–∞—è", "–ü–æ–ª–∏–Ω–æ–º 2 —Å—Ç–µ–ø–µ–Ω–∏",
                                                                                    "–ü–æ–ª–∏–Ω–æ–º 3 —Å—Ç–µ–ø–µ–Ω–∏",
                                                                                    "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è",
                                                                                    "–°—Ç–µ–ø–µ–Ω–Ω–∞—è", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è"])

frame = frame.sort_values(by=["œÉ"])

print(frame.to_string())
name_of_the_best = frame.index[0]
print(f"–ù–∞–∏–ª—É—á—à–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è: {name_of_the_best}")

start_x = min(points, key=lambda x: x[0])[0] - 10
end_x = max(points, key=lambda x: x[0])[0] + 10

plt.xlim(min(points, key=lambda x: x[0])[0] - 1, max(points, key=lambda x: x[0])[0] + 1)
plt.ylim(min(points, key=lambda x: x[1])[1] - 1, max(points, key=lambda x: x[1])[1] + 1)
x = np.linspace(start_x, end_x, 1000)

liny = [polynom(x, linear_params) for x in x]
plt.plot(x, liny, label="–õ–∏–Ω–µ–π–Ω–∞—è")
douby = [polynom(x, double_params) for x in x]
plt.plot(x, douby, label="–ü–æ–ª–∏–Ω–æ–º 2 —Å—Ç–µ–ø–µ–Ω–∏")
tripy = [polynom(x, triple_params) for x in x]
plt.plot(x, tripy, label="–ü–æ–ª–∏–Ω–æ–º 3 —Å—Ç–µ–ø–µ–Ω–∏")
if exp_params is not None:
    expy = [exp_func(x, exp_params) for x in x]
    plt.plot(x, expy, label="–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è")

px = [x for x in x if x > 0]
if log_params is not None:
    logy = [log_func(x, log_params) for x in px]
    plt.plot(px, logy, label="–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è")
if pow_params is not None:
    powy = [pow_func(x, pow_params) for x in px]
    plt.plot(px, powy, label="–°—Ç–µ–ø–µ–Ω–Ω–∞—è")

plt.scatter([x for x, y in points], [y for x, y in points], label="–ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏")
plt.legend()
plt.show()


def draw_one(function: Callable, params: list, points: list):
    plt.xlim(min(points, key=lambda x: x[0])[0] - 1, max(points, key=lambda x: x[0])[0] + 1)
    plt.ylim(min(points, key=lambda x: x[1])[1] - 1, max(points, key=lambda x: x[1])[1] + 1)
    plt.plot(x, [function(x, params) for x in x])
    plt.scatter([x for x, y in points], [y for x, y in points])
    plt.show()


match name_of_the_best:
    case "–õ–∏–Ω–µ–π–Ω–∞—è":
        draw_one(polynom, linear_params, points)
    case "–ü–æ–ª–∏–Ω–æ–º 2 —Å—Ç–µ–ø–µ–Ω–∏":
        draw_one(polynom, double_params, points)
    case "–ü–æ–ª–∏–Ω–æ–º 3 —Å—Ç–µ–ø–µ–Ω–∏":
        draw_one(polynom, triple_params, points)
    case "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è":
        draw_one(log_func, log_params, points)
    case "–°—Ç–µ–ø–µ–Ω–Ω–∞—è":
        draw_one(pow_func, pow_params, points)
    case "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è":
        draw_one(exp_func, exp_params, points)
    case _:
        print("–ù–µ—Ç —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
